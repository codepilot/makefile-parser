gnu_make {
--need parse for 9
--     objects = main.o kbd.o command.o display.o \
--               insert.o search.o files.o utils.o
--
--need parse for 13
--     clean:
--             rm edit $(objects)
--

--need parse for 14
--     .PHONY : clean
--


--need parse for 19
--     foo:
--             frobnicate > foo
--
--     %: force
--             @$(MAKE) -f Makefile $@
--     force: ;
--

--need to look at the rest




  ws              = ' '
                  | '\t'
                  | '\n'
                  | '\r\n'
  wss             = <ws>* $({})

  white_space     = '\\' <eol>                                                                                      $({})
                  | ' '                                                                                             $({})
  white_space_eol = <white_space>* <eol>                                                                            $({})
  alphanumeric    = [a-zA-Z0-9]
  file_symbol     = '.' | '-' | '*'
  file_symbols    = <alphanumeric> | <file_symbol>
  var_ref         = <white_space>* '$(' <alphanumerics>:v ')' <white_space>*                                        $({"var_ref", v})
  filename        = <white_space>*:a <file_symbols>+:f <white_space>*:b                                             $(f)
                  | <var_ref>
  filename_or_any = <filename>:f $(f)
                  | '%'          $({"any", "%"})
  filename_or_pipe= <filename>:f $(f)
                  | '>'          $({"redir", ">"})
  filenames       = <filename>+
  forps           = <filename_or_pipe>+
  eol             = '\n'                                                                                            $({})
                  | '\r\n'                                                                                          $({})
  make_tree       = <wss> <filename_or_any>:f ':' <filenames>:s <eol> <white_space>*:a <forps>:b  <white_space_eol>+         $({"rule", f, s, b})
                  | <wss> <filename_or_any>:f ':'               <eol> <white_space>*:a <forps>:b  <white_space_eol>+         $({"rule", f, {}, b})
                  | <wss> <filenames>:f ':' <filenames>:s <eol>                                                           $({"implicit_rule", f, s})
                  
  alphanumerics   = <alphanumeric>+
  var_file_list   = <white_space>* <alphanumerics>:v <white_space>* '=' <filenames>:l                               $({"var", v, l})
  mt_or_var       = <make_tree>:m                                                                                   $(m)
                  | <var_file_list>:v                                                                               $(v)
                  | ' '* 'include' <filenames>:f                                                                    $({"include", f})
--gnu_make_main   = <make_tree>*:m                                                                                  $(m)
  gnu_make_main   = <mt_or_var>*:m                                                                                  $(m)

  num   = [0-9]+

  exprA = <exprA>:a '-' <num>:b               $({a, "-", b})
        | <num>

  exprB = <num>
        | <exprB>:a '-' <num>:b               $({a, "-", b})

  exprC = <num>:a ('-' <num>)*:b               $({a, "-", b})

  xD    = <exprD>
  exprD = <xD>:a '-' <num>:b               $({a, "-", b})
        | <num>

  exprE = <num>:a '+' <num>:b               $({a, "+", b})
        | <num>:a '-' <num>:b               $({a, "-", b})

  term = <term>:a '+' <fact>:b               $({a, "+", b})
       | <term>:a '-' <fact>:b               $({a, "-", b})
       | <fact>

  fact = <fact>:a '*' <num>:b               $({a, "*", b})
       | <fact>:a '/' <num>:b               $({a, "/", b})
       | <num>

  start = <ones>:a '2':b               $({a, b})
        | '1':a <start>:b               $({a, b})
        | <_>!

  ones = <ones>:a '1':b               $({a, b})
       | '1'

  rr = '1':a <rr>:b               $({a, b})
     | '1'

  lr = <lr>:a '1':b               $({a, b})
     | '1'

  lr1 = <x>:a '1':b               $({a, b})
      | '1'

  x = <lr1>
}